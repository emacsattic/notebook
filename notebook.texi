\input texinfo @c  -*-texinfo-*-
@c  $Id$
@c %**start of header
@setfilename notebook.info
@settitle Notebook Mode Manual
@c %**end of header
@syncodeindex vr fn

@include version.texi

@ifinfo
@direntry
* Notebook Mode: (notebook).      Use emacs as front end for other programs
@end direntry

This is edition $Revision$ of the Notebook Mode Manual for Notebook
Mode version @value{VERSION}.

Copyright @copyright{}  2002 Fred Gylys-Colwell.
@end ifinfo

@contents
@titlepage
@sp 10
@title Notebook Mode Manual
@subtitle Running Programs within a Notebook in Emacs
@subtitle Version @value{VERSION} 
@author Fred Gylys-Colwell
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2003 Fred Gylys-Colwell.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled ``Copying'' and ``GNU General Public License'' are
included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.
     
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation
approved by the Free Software Foundation.

@end titlepage

@ifnottex
@node Top, Overview, (dir), (dir)
@end ifnottex

@top Notebook Mode

This is edition @value{VERSION} of the Notebook Mode Manual.

Notebook mode sets up a sub process that has well defined input and
output responses.  Each notebook has a collection of cells, consisting
of a prompt, an input region and an output region.  You tell Emacs to
send a cell to the process (using @kbd{C-@key{RET}} or @kbd{M-@key{RET}})
and when the process responds, it will paste the output in to the
output region.  You can then go back and edit other cells and re-enter
them.  Between the cells is regular text, which you can do with as you
wish.

This idea of a notebook with cells is popular with programs such as Matlab,
Maple or Mathematica.  I use it with matlab, and then pipe the notebook through
latex.  

The basic version, @code{notebook-mode}, runs the shell @code{bash} as the
subprocess.  But there are other modes for running other programs.

@menu
* Overview::                    What Notebook Mode is and how it can be used.
* New::                          What's new in version @value{VERSION}.

Submodes
* Matlab Mode::                 Running Matlab in a notebook.
* Octave Mode::                 Running Octave in a notebook.
* MuPad Mode::                  Running Mupad in a notebook.
* Create Your Own::             Hack the code -- make your own mode.

Indices

* Concept Index::               Index of Notebook Mode Concepts.
* Keystroke Index::             Index of key bindings in Notebook Mode.

@end menu

@node Overview, New, Top, Top
@comment  node-name,  next,  previous,  up
@chapter Overview of Notebook Mode
@cindex overview of notebook-mode
@cindex notebook-mode, overview of

Notebook mode sets up a sub process that has well defined input and output
responses.  Each notebook has a collection of cells, consisting of a prompt, an
input region and an output region.  You tell Emacs to send a cell to the
process (using C-Enter or M-Enter) and when the process responds, it will paste
the output in to the output region.  You can then go back and edit other cells
and re-enter them.  Between the cells is regular text, which you can do with as
you wish. 

This idea of a notebook with cells is popular with programs such as Matlab,
Maple or Mathematica.  I use it with matlab, and then pipe the notebook through
latex.

In order to use it automatically for specific files, I've added the
following to my auto-mode-alist: 
@lisp
 ("\\.mu$" . mupad-notebook-mode)
 ("\\.matlab$" . matlab-notebook-mode)
 ("\\.M$" . matlab-notebook-mode)
 ("\\.octave$" . octave-notebook-mode)
 ("\\.shell$" . notebook-mode)
@end lisp


There are several commands you can use to manipulate cells:

@table @kbd
@item C-@key{RET}  
@kindex @kbd{C-@key{RET}} nb-send-input
Sends the cell at (or just before) point to the sub-process.  If the
process is not running, it is started.  

@item M-@key{TAB} 
@kindex @kbd{M-@key{TAB}} nb-next-cell
Move point the the beginning of the next cell's input.  If there is no
cell after point, a new cell is created.

@item M-@key{RET} 
@kindex @kbd{M-@key{RET}} nb-send-input-forward
First enter the current cell, and then move to the next cell. This is
the same as typing @kbd{C-@key{RET} M-@key{TAB}}.

@item C-c C-n
@kindex @kbd{C-c C-n} nb-create-cell
Create a new cell at point.  If point is currently in a cell, a new
cell is created on the next line.

@item C-c C-r
@kindex @kbd{C-c C-r} nb-send-input-region
Send all cells in the current region to the process.  If the process
is not running, it is started first.

@item C-c C-b
@kindex @kbd{C-c C-b} nb-send-input-buffer
Send all cells in the buffer to the process.  If the process
is not running, it is started first.

@item C-c C-c
@kindex @kbd{C-c C-c} nb-kill-process
Kill the process.

@item C-c C-s
@kindex @kbd{C-c C-s} nb-start-process
Re-start the process. 

@item C-c C-f
@kindex @kbd{C-c C-f} notebook-to-????
Create a text file from the notebook.
Notebook mode trys to guess if the text file is plain text, HTML, or
LaTeX.  It then generates a file of the appropriate type.

@end table


@node New, Matlab Mode, Overview, Top
@comment  node-name,  next,  previous,  up
@chapter What's New
@cindex new in version @value{VERSION}

This version of notebook mode has a several internal changes.  The
most visible is that coloring is now done by font-lock mode.

Another change is that the notebook modes now inherit from one of the
text modes: html-mode, text-mode, or latex-mode.  Notebook mode tries
to guess which type is appropriate by the file type.

@cindex notebook-default-text-mode
@cindex text mode, default
For noew files, it uses the variable @code{notebook-default-text-mode}
to pick a base mode.


@node Matlab Mode, Octave Mode, New, Top
@comment  node-name,  next,  previous,  up
@chapter Running Matlab in a Notebook
@cindex matlab
@cindex matlab-mode


This runs @code{matlab} as the process instead of the @code{bash}.
In addition to the commands available to a generic notebook, the
following commands might also be useful.  These are really only useful
if you want to embed output from matlab into a latex document.


@table @kbd
@item C-c C-f
@kindex @kbd{C-c C-f}
Generate a LaTeX file with the same name as this buffer, except the
extension is changed to @code{.tex}.  The input cells are embedded
into special tex code that prints them with little formatting, and in
the @code{tt} font.  If the prompt is @samp{>>}, then the cell is
displayed verbatim, on a new line by itself.
If the prompt is @samp{>}, then the cell displayed within the current text.

@item C-c >
@kindex @kbd{C-c >}
Toggle the prompt style from  @samp{>>} to  @samp{>} and back again on
the cell at point.  This is used when converting to a tex file to
decide if the cell should be on a line by itself.

@end table


@node Octave Mode, MuPad Mode, Matlab Mode, Top
@comment  node-name,  next,  previous,  up
@chapter Running Octave in a Notebook
@cindex octave
@cindex octave-mode

Note: this may be obsolete.  I haven't tested it recently.
It uses the same interface as matlab-mode.

@node MuPad Mode, Create Your Own, Octave Mode, Top
@comment  node-name,  next,  previous,  up
@chapter Running MuPad in a Notebook
@cindex mupad
@cindex mupad-mode

Note: this may be obsolete.  I haven't tested it recently.
It uses the same interface as matlab-mode.

@node Create Your Own, Concept Index, MuPad Mode, Top
@comment  node-name,  next,  previous,  up
@chapter Hack the code -- make your own mode.
@cindex hack
@cindex other programs
@cindex create new mode

In order to create your own subprocess, there are several variables
that need to be set.  See the code for matlab-notebook-mode for an
example.

The variable @code{nb-adjust-input-string} should be a function that
adjusts an input cell before it gets sent to the subprocess.  The hard
part is getting the sub process to print out a tag for the beginning
and end of a cell.
It is called with STRING, BUFFER, and NAME.
STRING is the string which should be sent.  BUFFER is the name of the
notebook buffer. NAME is the name of the input cell.  Output from
the process will have to be recognized by NAME and BUFFER.
Some notebook modes will have one process that is shared by several
buffers.  That is why the buffer name is also sent with the input.

The variable @code{nb-adjust-output-string} should be a function that
strips of any extra stuff from the subprocess output.  It can also
adjust indentation or clean things up if it wants to.
It is called with INPUT-START, INPUT-END
 OUTPUT-START, OUTPUT-END, and CELL.  It should edit
the current buffer between START and END.  CELL is the name of the cell. 

The variable @code{nb-start-process} should be a function that starts
the correct subprocess, or tries to find an existing process of the
correct type.

The variable @code{nb-cell-regexp}  is the regular expression which
matches an entire cell. 
The first character should be unusual, since this is sometimes
used in searches.
The first set of parenthesis should match the prompt.
The second set should match either the cell name, or an empty string.
The third should match the input part of the cell.
The fourth should match the output part of the cell.


The variable @code{nb-empty-cell-format}
This is inserted as an initial empty cell.  It is passed to the lisp
function @code{format} with the cell name as the argument.  For
example, the shell notebook uses:
@verbatim
"\b%s>   \b  (no output yet)\b\n"
@end verbatim

The variable @code{nb-output-regexp}
is a regular expression which matches the output from the
process.
The name of the buffer should match the first set of parentheses.
The name of the cell should match the second pair of parentheses.
The third set should match the useful part of the output.  


The variable @code{nb-preprocess-output}
can contain a function which is called before output is inserted into
the cell.  If this variable is nil, no preprocessing is done.
It is called with the parameters (NAME STRING) where NAME is the name of the cell
and STRING is the output.  If it returns nil, the output is inserted as usual,
otherwise the output is ignored.  This can be used so that the process
can send other information to emacs.

@node Concept Index, Keystroke Index, Create Your Own, Top
@comment  node-name,  next,  previous,  up
@chapter Concept Index

@printindex cp

@node Keystroke Index,  , Concept Index, Top
@comment  node-name,  next,  previous,  up
@chapter Keystroke Index

@printindex ky


@bye

@c etc...

@c Local Variables:
@c mode: texinfo
@c mode: font-lock
@c mode: outline-minor
@c End:
